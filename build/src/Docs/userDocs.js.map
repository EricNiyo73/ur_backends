{"version":3,"file":"userDocs.js","names":[],"sources":["../../../src/Docs/userDocs.js"],"sourcesContent":["/**\r\n * @swagger\r\n * components:\r\n *   schemas:\r\n *     UserModel:\r\n *       type: object\r\n *       properties:\r\n *         firstname:\r\n *           type: string\r\n *           description: First name of the user\r\n *         lastname:\r\n *           type: string\r\n *           description: Last name of the user\r\n *         email:\r\n *           type: string\r\n *           description: Email of the user\r\n *         password:\r\n *           type: string\r\n *           description: Password of the user\r\n *         emailToken:\r\n *           type: string\r\n *           description: Email verification token of the user\r\n *         isVerified:\r\n *           type: boolean\r\n *           description: Whether the user's email has been verified\r\n *         role:\r\n *           type: string\r\n *           description: Role of the user\r\n *           enum:\r\n *             - user\r\n *             - admin\r\n *             - leader\r\n *           default: user\r\n *         date:\r\n *           type: string\r\n *           format: date-time\r\n *           description: Date and time when the user was created\r\n *       required:\r\n *         - firstname\r\n *         - lastname\r\n *         - email\r\n *         - password\r\n *         - emailToken\r\n */\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * @swagger\r\n * /user/signup:\r\n *   post:\r\n *     summary: Create a new user\r\n *     description: Creates a new user account and sends a verification email\r\n *     tags:\r\n *       - users\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               firstname:\r\n *                 type: string\r\n *               lastname:\r\n *                 type: string\r\n *               email:\r\n *                 type: string\r\n *               password:\r\n *                 type: string\r\n *     responses:\r\n *       '200':\r\n *         description: User account created successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 status:\r\n *                   type: string\r\n *                   description: Status of the response\r\n *                 data:\r\n *                   type: object\r\n *                   description: Response data\r\n *                   properties:\r\n *                     user:\r\n *                       type: object\r\n *                       description: Created user object\r\n *                       properties:\r\n *                         _id:\r\n *                           type: string\r\n *                           description: Unique ID of the user\r\n *                         firstname:\r\n *                           type: string\r\n *                           description: First name of the user\r\n *                         lastname:\r\n *                           type: string\r\n *                           description: Last name of the user\r\n *                         email:\r\n *                           type: string\r\n *                           description: Email address of the user\r\n *                         emailToken:\r\n *                           type: string\r\n *                           description: Verification token for the user's email address\r\n *       '400':\r\n *         description: Invalid email format\r\n *       '409':\r\n *         description: Email already exists\r\n *       '500':\r\n *         description: Unexpected error\r\n */\r\n\r\n/**\r\n * @swagger\r\n * /user/login:\r\n *   post:\r\n *     summary: Authenticate user and get a JWT token\r\n *     description: Authenticate user with email and password, and return a JWT token\r\n *     tags:\r\n *       - users\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               email:\r\n *                 type: string\r\n *               password:\r\n *                 type: string\r\n *     responses:\r\n *       '200':\r\n *         description: Logged in successfully\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: object\r\n *               properties:\r\n *                 message:\r\n *                   type: string\r\n *                   description: Status message\r\n *                 token:\r\n *                   type: string\r\n *                   description: JWT token for the authenticated user\r\n *       '201':\r\n *         description: Invalid email or password\r\n *       '500':\r\n *         description: Unexpected error\r\n */\r\n\r\n\r\n// =====================get all=========================\r\n\r\n/**\r\n * @swagger\r\n * /user:\r\n *   get:\r\n *     summary: Get all users\r\n *     description: Retrieve a list of all users\r\n *     tags:\r\n *       - users\r\n *     responses:\r\n *       '200':\r\n *         description: A list of users\r\n *         content:\r\n *           application/json:\r\n *             schema:\r\n *               type: array\r\n *       '500':\r\n *         description: Unexpected error\r\n */\r\n// =============================update users=========================\r\n/**\r\n * @swagger\r\n *\r\n * /user/{id}:\r\n *   put:\r\n *     summary: Update a user\r\n *     description: Update a user with the given ID.\r\n *     tags: [users]\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         description: ID of the user to update\r\n *         required: true\r\n *         schema:\r\n *           type: string\r\n *       - in: body\r\n *         name: user\r\n *         description: The user object to update\r\n *         required: true\r\n *     responses:\r\n *       200:\r\n *         description: The updated user\r\n *       401:\r\n *         description: Unauthorized\r\n *       500:\r\n *         description: Internal server error\r\n */\r\n\r\n// ======================delete========================\r\n\r\n/**\r\n * @swagger\r\n * /user/{id}:\r\n *   delete:\r\n *     summary: Delete a user by ID\r\n *     description: Deletes a user based on their ID. Only the user who owns the account can delete their account.\r\n *     tags: [users]\r\n *     parameters:\r\n *       - in: path\r\n *         name: id\r\n *         schema:\r\n *           type: string\r\n *         required: true\r\n *         description: The ID of the user to delete\r\n *     requestBody:\r\n *       required: true\r\n *       content:\r\n *         application/json:\r\n *           schema:\r\n *             type: object\r\n *             properties:\r\n *               userId:\r\n *                 type: string\r\n *                 description: The ID of the user making the request\r\n *             example:\r\n *               userId: 1234567890\r\n *     responses:\r\n *       '200':\r\n *         description: User successfully deleted\r\n *       '401':\r\n *         description: Only the user who owns the account can delete their account\r\n *       '404':\r\n *         description: User not found\r\n */"],"mappingsjCA"}